import glob
import os
import sys
import random
import time
import numpy as np
import h5py
import cv2


try:
    sys.path.append(
        glob.glob("../carla/dist/carla-*%d.%d-%s.egg"
            % (sys.version_info.major,sys.version_info.minor,"win-amd64" if os.name == "nt" else "linux-x86_64",))[0])
except IndexError:
    pass

import carla

IMAGE_WIDTH = 640 #1920
IMAGE_HEIGHT = 480 #1080

def camera_rgb_install():
    camera_bp = blueprint_library.find("sensor.camera.rgb")
    camera_bp.set_attribute("image_size_x", f'{IMAGE_WIDTH}')
    camera_bp.set_attribute("image_size_y", f'{IMAGE_HEIGHT}')
    camera_bp.set_attribute("fov", "110")

    camera_init_spawn = carla.Transform(carla.Location(x=2.0, z=1.5))
    camera = world.spawn_actor(camera_bp, camera_init_spawn, attach_to=ego_vehicle)
    actor_list.append(camera)

    spectator.set_transform(carla.Transform(ego_vehicle.get_location() + carla.Location(z=50), 
                                            carla.Rotation(pitch=-90, yaw=ego_vehicle.get_transform().rotation.yaw)))
    return camera

def process_img(image):
    i = np.array(image.raw_data)
    i2 = i.reshape((IMAGE_HEIGHT, IMAGE_WIDTH, 4))
    i3 = i2[:, :, :3]
    #cv2.imshow("", i3)
    cv2.waitKey(1)
    return i3/255.0



actor_list = []

# In this tutorial script, we are going to add a vehicle to the simulation
# and let it drive in autopilot. We will also create a camera attached to
# that vehicle, and save all the images generated by the camera to disk.

try:
    # First of all, we need to create the client that will send the requests
    # to the simulator. Here we'll assume the simulator is accepting
    # requests in the localhost at port 2000.
    client = carla.Client("localhost", 2000)
    client.set_timeout(3.0)

    # Once we have a client we can retrieve the world that is currently running.
    world = client.get_world()

    # Retrieve the spectator object
    spectator = world.get_spectator()

    # Get the location and rotation of the spectator through its transform
    transform = spectator.get_transform()

    location = transform.location
    rotation = transform.rotation

    blueprint_library = world.get_blueprint_library()

    # Set the spectator with an empty transform
    #spectator.set_transform(carla.Transform())

    # This will set the spectator at the origin of the map, with 0 degrees
    # pitch, yaw and roll - a good way to orient yourself in the map

    vehicle_blueprints = blueprint_library.filter("*vehicle*")

    spawn_points = world.get_map().get_spawn_points()

    """
        auto nad kojim će se učiti algoritam
    """

    """ random.choice(vehicle_blueprints) """
    ego_vehicle = world.spawn_actor(blueprint_library.filter("etron")[0], random.choice(spawn_points))

    for i in range(0, 50):
        npc_vehicle = world.try_spawn_actor(random.choice(vehicle_blueprints), random.choice(spawn_points))
        if(npc_vehicle is not None):
            #npc_vehicle.set_autopilot(True)
            actor_list.append(npc_vehicle)

    actor_list.append(ego_vehicle)

    """ postavljanje sensora na auto """
    
    # kamera RGB
    camera = camera_rgb_install()

    # kamera 

    ego_vehicle.get_control().steer = 0.0
    ego_vehicle.get_control().throttle = 0.0
    ego_vehicle.get_control().brake = 0.0
    ego_vehicle.get_control().hand_brake = False
    ego_vehicle.get_control().reverse = False

    

    camera_data = []
    steering_data = []
    throttle_data = []
    brake_data = []

    ego_vehicle.set_autopilot(True)
    
    num_frames = 100
    for _ in range(num_frames):
        # Synchronize the CARLA world
        world.tick()

        camera_data.append(camera.listen(lambda image: process_img(image)))

        # Get car controls
        control = ego_vehicle.get_control()
        steering_data.append(control.steer)
        brake_data.append(control.brake)
        throttle_data.append(control.throttle)

    # Convert the collected data to NumPy arrays
    camera_data = np.array(camera_data)
    steering_data = np.array(steering_data)
    brake_data = np.array(brake_data)
    throttle_data = np.array(throttle_data)

    # Save the data to an HDF5 file
    with h5py.File('carla_data.h5', 'w') as hf:
        hf.create_dataset('camera_data', data=camera_data)
        hf.create_dataset('steering_data', data=steering_data)
        hf.create_dataset('brake_data', data=brake_data)
        hf.create_dataset('throttle_data', data=throttle_data)


    time.sleep(5)

finally:
    for actor in actor_list:
        actor.destroy()
    print("done.")
